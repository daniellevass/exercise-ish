{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","exercise","name","image","easy","medium","difficult","generateExercises","abs","quads","glutes","back","chest","exercises","push","randomMax","length","shuffle","setState","array","sort","Math","random","max","floor","start","next","state","index","done","actionButton","Button","color","variant","this","title","src","width","max-height","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.08ac05f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button } from '@material-ui/core';\n\nclass App extends Component {\n\n  constructor(props) {\n    super();\n    this.props = props;\n\n    this.state = {\n      exercises: [],\n      index: 0,\n      done: false\n    }\n\n\n  }\n\n  exercise = (name, image, easy, medium, difficult) => {\n    return {\n      \"name\" : name,\n      \"image\" : image,\n      \"easy\" : easy,\n      \"medium\" : medium,\n      \"difficult\" : difficult\n    }\n  }\n\n  generateExercises = () => {\n\n      let abs = [\n        this.exercise(\"sit ups\", \"https://media.giphy.com/media/FvfUDSqHruCDm/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"bicycle crunches\", \"https://media.giphy.com/media/TMNCtgJGJnV8k/giphy.gif\",  \"20\", \"40\", \"60\"),\n        this.exercise(\"leg raises\", \"https://media.giphy.com/media/5EJHDSPpFhbG0/giphy.gif\", \"10 secs\", \"20 secs\", \"30 secs\" ),\n        this.exercise(\"elbow plank\", \"https://media.giphy.com/media/BeLPrrXzTcf7y/giphy.gif\", \"10 secs\", \"20 secs\", \"30 secs\" )\n      ]\n\n      let quads = [\n        this.exercise(\"lunges\", \"https://media.giphy.com/media/nQASBL1KBUEbC/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"high knees\", \"https://media.giphy.com/media/l0HlNOsSRC0Bts7iU/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"mountain climbers\", \"https://media.giphy.com/media/kzrev0zd1ScWOwbxJN/giphy.gif\", \"10\", \"20\", \"30\")\n      ]\n\n      let glutes = [\n        this.exercise(\"squats\", \"https://media.giphy.com/media/1qfKN8Dt0CRdCRxz9q/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"donkey kicks\", \"https://media.giphy.com/media/FeKkg08Se3AXu/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"bridges\", \"https://media.giphy.com/media/duatwzNErHFKw/giphy.gif\", \"10 secs\", \"20 secs\", \"30 secs\"),\n        this.exercise(\"side lunge\", \"https://media.giphy.com/media/ej7Igu4RKShRQ2l1az/giphy.gif\", \"10\", \"20\", \"30\")\n      ]\n\n      let back = [\n        this.exercise(\"superman\", \"https://media.giphy.com/media/10bKPDUM5H7m7u/giphy.gif\", \"10 secs\", \"20 secs\", \"30 secs\")\n      ]\n\n      let chest = [\n        this.exercise(\"push ups\", \"https://media.giphy.com/media/71EnBvrIr1Xji/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"plank rotations\", \"https://media.giphy.com/media/yIv8U59Lhj2aQ/giphy.gif\", \"10\", \"20\", \"30\"),\n        this.exercise(\"shoulder taps\", \"https://media.giphy.com/media/ZiDnfvNB4PjVu/giphy.gif\", \"10\", \"20\", \"30\")\n      ]\n\n      let exercises = [];\n\n      exercises.push(abs[this.randomMax(abs.length)])\n      exercises.push(quads[this.randomMax(quads.length)])\n      exercises.push(glutes[this.randomMax(glutes.length)])\n      exercises.push(back[this.randomMax(back.length)])\n      exercises.push(chest[this.randomMax(chest.length)])\n\n      this.shuffle(exercises)\n\n      this.setState({\"exercises\" : exercises})\n\n  }\n\n  shuffle = (array) => {\n    array.sort(() => Math.random() - 0.5);\n  }\n\n  randomMax = (max) => {\n    return Math.floor(Math.random() * max)\n  }\n\n\n  start = () => {\n    this.generateExercises();\n  }\n\n  next = () => {\n    if (this.state.index < this.state.exercises.length -1){\n      let index = this.state.index +1\n      this.setState({\"index\" : index})\n    } else {\n       this.setState({\"done\": true})\n    }\n  }\n\n\nrender() {\n\n  let actionButton = <Button color=\"primary\" variant=\"contained\" color=\"secondary\" size=\"large\"\n      onClick={this.start}>Start</Button>;\n  let title = <h1>Welcome to Exercise-ish</h1>\n  let image = <p></p>\n\n  if (this.state.done) {\n    actionButton = <p></p>\n    title = <h1>Congratulations ðŸŽ‰</h1>\n    image = <img src=\"https://media.giphy.com/media/3oz8xAFtqoOUUrsh7W/giphy.gif\" width=\"500px\" />\n  } else if (this.state.exercises.length > 0) {\n    actionButton = <Button color=\"primary\" variant=\"contained\" color=\"primary\"  size=\"large\"\n        onClick={this.next}>Next</Button>;\n    title = <div>\n              <h1>{this.state.exercises[this.state.index].easy} {this.state.exercises[this.state.index].name}</h1>\n              <h2>{this.state.index} / {this.state.exercises.length}</h2>\n            </div>\n    image = <img src={this.state.exercises[this.state.index].image} width=\"500px\" max-height=\"500px\" />\n  }\n\n\n\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {title}\n        {image}\n        {actionButton}\n      </header>\n    </div>\n  );\n}\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}